#include <gmock/gmock.h>
#include <gtest/gtest.h>
#include "../../../src/threads/command_caller.h"
#include "../../lib/gmock-global.h"

using ::testing::AtLeast;
using ::testing::Return;

const std::string output_str = "success"; 
const std::string err_str = "error"; 

class CommandCallerTest : public CommandCaller
{
	FRIEND_TEST(COMMAND_CALLER, TEST_1);
	// MOCK_METHOD1(call_command, CommandCaller::results(std::vector<std::string>));
	MOCK_METHOD2(call_command, CommandCaller::results(std::vector<std::string>, std::string));
	// MOCK_METHOD(std::string, call_command, (std::vector<std::string> command, std::string return_on_error), (override));

public:
	CommandCallerTest::results result_success = {0, output_str, err_str};
	CommandCallerTest::results result_error = {1, output_str, err_str};
};


TEST(COMMAND_CALLER, TEST_LOG_SUCCESS){
	std::vector<std::string> command = {"dmesg"};
	std::string return_on_error = "";
	// EXPECT_CALL(CommandCallerTest, call_command("dmesg", ""));//.Times(AtLeast(1));

	CommandCallerTest::get_logs_str();
}


